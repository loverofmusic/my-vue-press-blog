(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{420:function(a,e,t){"use strict";t.r(e);var s=t(5),r=Object(s.a)({},(function(){var a=this,e=a.$createElement,t=a._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h3",{attrs:{id:"缓存机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#缓存机制"}},[a._v("#")]),a._v(" 缓存机制")]),a._v(" "),t("h3",{attrs:{id:"ssr原理（优化首屏加载速度-seo）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ssr原理（优化首屏加载速度-seo）"}},[a._v("#")]),a._v(" SSR原理（优化首屏加载速度 seo）")]),a._v(" "),t("p",[a._v("基于"),t("code",[a._v("虚拟DOM")]),a._v("的概念")]),a._v(" "),t("p",[a._v("因为虚拟dom是一个js对象，所以在做服务端渲染的时候，可以把虚拟dom转化成字符串返回给浏览器；做客户端渲染时，可以把虚拟dom转化成真实dom")]),a._v(" "),t("h3",{attrs:{id:"一般配合场景-setstate后取值使用的，初学者经常发现setstate后值还是旧的，而且这个错误很难发现"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一般配合场景-setstate后取值使用的，初学者经常发现setstate后值还是旧的，而且这个错误很难发现"}},[a._v("#")]),a._v(" 一般配合场景:setState后取值使用的，初学者经常发现setState后值还是旧的，而且这个错误很难发现")]),a._v(" "),t("p",[a._v("nodejs的event loop 和浏览器的有什么区别")]),a._v(" "),t("h3",{attrs:{id:"webpack-loader和plugin-区别？loader-plugin-实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack-loader和plugin-区别？loader-plugin-实现原理"}},[a._v("#")]),a._v(" webpack loader和plugin 区别？loader/plugin 实现原理")]),a._v(" "),t("h4",{attrs:{id:"两者区别："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#两者区别："}},[a._v("#")]),a._v(" 两者区别：")]),a._v(" "),t("ul",[t("li",[a._v("loader是加载器，首先 webpack 是将一切文件视为模块的，但是 webpack自身只能处理js类型的文件，所以要打包非js文件，就需要loader，也就是说 loader 的作用就是让webpack拥有处理非js文件的能力")]),a._v(" "),t("li",[a._v("plugin是插件，在webpack运行的生命周期中会广播出许多事件，plugin可以监听这些事件，在合适的时机通过webpack提供的API改变输出结果")])]),a._v(" "),t("h4",{attrs:{id:"loader原理："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#loader原理："}},[a._v("#")]),a._v(" loader原理：")]),a._v(" "),t("ul",[t("li",[a._v("loader本质就是一个node模块，既然是模块，那就一定会导出点什么")]),a._v(" "),t("li",[a._v("在webpack定义中，loader"),t("code",[a._v("导出一个函数")]),a._v("，loader会接收一个源模块作为参数，然后处理这个源模块之后，将其返回给下一个loader")]),a._v(" "),t("li",[a._v("如果是最后一个loader，那么它的返回值 将最终交给webpack的require，换句话，就是一段用字符串存储的node模块的js脚本")]),a._v(" "),t("li",[a._v("概括一下loader的功能，其实就是把源模块转换成通用模块")])]),a._v(" "),t("h4",{attrs:{id:"plugin原理："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#plugin原理："}},[a._v("#")]),a._v(" plugin原理：")]),a._v(" "),t("ul",[t("li")]),a._v(" "),t("h3",{attrs:{id:"webpack-tree-shaking-技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack-tree-shaking-技术"}},[a._v("#")]),a._v(" webpack tree-shaking 技术")]),a._v(" "),t("ul",[t("li",[a._v("依赖ES6模块静态分析的")])]),a._v(" "),t("h4",{attrs:{id:"webpack-热更新原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#webpack-热更新原理"}},[a._v("#")]),a._v(" webpack 热更新原理")]),a._v(" "),t("h3",{attrs:{id:"vue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[a._v("#")]),a._v(" vue")]),a._v(" "),t("h3",{attrs:{id:"react"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[a._v("#")]),a._v(" react")]),a._v(" "),t("h3",{attrs:{id:"es5-es6-的继承除了写法以外还有什么区别？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#es5-es6-的继承除了写法以外还有什么区别？"}},[a._v("#")]),a._v(" ES5/ES6 的继承除了写法以外还有什么区别？")]),a._v(" "),t("p",[a._v("最重要的一点是继承机制完全不同，es5是先创建子类实例对象的this，然后将父类方法赋到这个this上。es6是先在子类构造函数中用super创建父类实例的this,再在构造函数中进行修改它。\n也因此，es5中array，error等原生构造函数无法继承而es6就可以自己定义这些原生构造函数。\n（es5中子类无法拿到父类的内部属性，就算是apply也不行，es5默认忽略apply传入的this）。")]),a._v(" "),t("h3",{attrs:{id:"async-await-如何通过es5-进行实现-表述的时候可能有问题吧"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#async-await-如何通过es5-进行实现-表述的时候可能有问题吧"}},[a._v("#")]),a._v(" async/await 如何通过es5 进行实现? 表述的时候可能有问题吧.")]),a._v(" "),t("p",[a._v("通过es5实现的机制主要是通过 while无线循环 + 状态机 进行实现")]),a._v(" "),t("h3",{attrs:{id:"考查async-await的实现原理吧？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#考查async-await的实现原理吧？"}},[a._v("#")]),a._v(" 考查async/await的实现原理吧？")]),a._v(" "),t("p",[a._v("我只知道async/await是使用generator+run函数（自动执行generator）")]),a._v(" "),t("h3",{attrs:{id:"http2-多路复用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http2-多路复用"}},[a._v("#")]),a._v(" http2 多路复用")]),a._v(" "),t("h3",{attrs:{id:"是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#是什么"}},[a._v("#")]),a._v(" 是什么")]),a._v(" "),t("p",[a._v("同一个TCP连接，同一时刻可以传输多个HTTP请求（多路复用，就是在一个 TCP 连接中可以存在多条流。换句话说，也就是可以发送多个请求，对端可以通过帧中的标识知道属于哪个请求。）")]),a._v(" "),t("h3",{attrs:{id:"怎么做到的"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#怎么做到的"}},[a._v("#")]),a._v(" 怎么做到的")]),a._v(" "),t("p",[a._v("在 HTTP/2 中，有两个非常重要的概念，分别是帧（frame）和流（stream）。\n帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。")]),a._v(" "),t("h4",{attrs:{id:"有什么作用："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#有什么作用："}},[a._v("#")]),a._v(" 有什么作用：")]),a._v(" "),t("ul",[t("li",[a._v("通过这个技术，可以避免 HTTP 旧版本中的"),t("code",[a._v("队头阻塞问题")]),a._v("，极大的提高传输性能。")]),a._v(" "),t("li",[a._v("同一域名下，只需要建立一个tcp连接。 => 减少握手等待时间，以及多个 tcp 竞争带宽。")]),a._v(" "),t("li",[a._v("单个连接可以承受任意数量的双向数据流。 => 并行多个请求响应。")]),a._v(" "),t("li",[a._v("数据流以消息的形式发送，消息由一个或多个帧组成；帧可以乱序发送，根据帧头部的流标识重新组装。")])]),a._v(" "),t("h3",{attrs:{id:"历史原因解释："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#历史原因解释："}},[a._v("#")]),a._v(" 历史原因解释：")]),a._v(" "),t("p",[a._v("1、HTTP/1.0 版本\n该版本主要缺点是，每个TCP连接只能发送一个请求。发送数据完毕，连接就关闭，如果还要请求其他资源，就必须再新建一个连接。为了解决这个问题，需要使用 Connection: keep-alive 这个字段。")]),a._v(" "),t("p",[a._v("2、HTTP/1.1 版本\n该版本引入了持久连接（persistent connection），即 TCP 连接默认不关闭，可以被多个请求复用，不用声明 Connection: keep-alive。还引入了管道机制（pipelining），即在同一个TCP连接里面，客户端可以同时发送多个请求。这样就进一步改进了HTTP协议的效率。")]),a._v(" "),t("p",[a._v('虽然1.1版允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是按次序进行的。服务器只有处理完一个回应，才会进行下一个回应。要是前面的回应特别慢，后面就会有许多请求排队等着。这称为"队头堵塞"（Head-of-line blocking）。')]),a._v(" "),t("h3",{attrs:{id:"谈谈你对tcp三次握手和四次挥手的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#谈谈你对tcp三次握手和四次挥手的理解"}},[a._v("#")]),a._v(" 谈谈你对TCP三次握手和四次挥手的理解")]),a._v(" "),t("p",[a._v("三次握手之所以是三次是保证client和server均让对方知道自己的接收和发送能力没问题而保证的最小次数。")]),a._v(" "),t("p",[a._v("第一次client => server 只能server判断出client具备发送能力\n第二次 server => client client就可以判断出server具备发送和接受能力。此时client还需让server知道自己接收能力没问题于是就有了第三次\n第三次 client => server 双方均保证了自己的接收和发送能力没有问题")]),a._v(" "),t("p",[a._v("其中，为了保证后续的握手是为了应答上一个握手，每次握手都会带一个标识 seq，后续的ACK都会对这个seq进行加一来进行确认。")])])}),[],!1,null,null,null);e.default=r.exports}}]);